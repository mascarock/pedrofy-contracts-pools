#include "imports/stdlib.fc";

;; =============== Operaciones ===============
const op::create_pair = "op::create_pair"c;           ;; 0x12a2d48c - Crear un nuevo par de liquidez
const op::set_fee = "op::set_fee"c;                   ;; 0x637f0d2b - Configurar comisión para pares
const op::collect_fee = "op::collect_fee"c;           ;; 0x5dbd0308 - Recolectar comisiones acumuladas

;; =============== Variables de almacenamiento ===============
global slice ctx_owner;               ;; Dirección del propietario del factory (como slice)
global cell ctx_pairs;                ;; Diccionario que almacena pares (token0, token1) -> par_address
global cell ctx_pair_code;            ;; Código del contrato para pares
global int ctx_default_fee;           ;; Comisión predeterminada para nuevos pares (en basis points)
global slice ctx_fee_collector;       ;; Dirección para recolectar comisiones (como slice)
global int ctx_total_pairs;           ;; Contador de pares creados

;; =============== Funciones de almacenamiento ===============
() load_data() impure {
    var ds = get_data().begin_parse();
    ctx_owner         = ds~load_msg_addr();  ;; Cargar como dirección
    ctx_pair_code     = ds~load_ref();
    ctx_default_fee   = ds~load_uint(16);
    ctx_fee_collector = ds~load_msg_addr();  ;; Cargar como dirección
    ctx_total_pairs   = ds~load_uint(32);

    ;; pairs dict en ref (puede crecer sin límite)
    slice pairs_sl    = ds~load_ref().begin_parse();
    ctx_pairs         = pairs_sl~load_dict();
}

() save_data() impure {
    var pairs_cs = begin_cell().store_dict(ctx_pairs).end_cell();

    set_data(
        begin_cell()
            .store_slice(ctx_owner)
            .store_ref(ctx_pair_code)
            .store_uint(ctx_default_fee, 16)
            .store_slice(ctx_fee_collector)
            .store_uint(ctx_total_pairs, 32)
            .store_ref(pairs_cs)
            .end_cell()
    );
}

;; =============== Funciones auxiliares ===============

;; Implementación de equal_slices para comparar dos slices
int equal_slices(slice a, slice b) {
    return slice_hash(a) == slice_hash(b);
}

;; Función para ordenar las direcciones de tokens (para garantizar consistencia)
(slice, slice) sort_tokens(slice token0, slice token1) {
    int cmp = slice_hash(token0) <=> slice_hash(token1);
    if (cmp < 0) {
        return (token0, token1);
    } else {
        return (token1, token0);
    }
}

;; Calcula el hash para acceder al diccionario de pares
int get_pair_hash(slice token0, slice token1) {
    ;; Asegura que los tokens estén ordenados
    (slice sorted_token0, slice sorted_token1) = sort_tokens(token0, token1);
    
    ;; Combina las direcciones para crear un hash único
    return cell_hash(
        begin_cell()
            .store_slice(sorted_token0)
            .store_slice(sorted_token1)
            .end_cell()
    );
}

;; Verifica si un par existe
(slice, int) get_pair(slice token0, slice token1) {
    int hash = get_pair_hash(token0, token1);
    (slice value, int found) = ctx_pairs.udict_get?(256, hash);
    slice pair_address = null();
    if (found) {
        pair_address = value;
    }
    return (pair_address, found);
}

;; Genera el estado inicial para un nuevo par
cell generate_pair_state(slice token0, slice token1) {
    slice factory_address = my_address();
    
    return begin_cell()
        .store_slice(token0)
        .store_slice(token1)
        .store_uint(0, 128)  ;; reserve0 = 0
        .store_uint(0, 128)  ;; reserve1 = 0
        .store_uint(0, 128)  ;; total_supply = 0
        .store_dict(new_dict())  ;; lp_balances = {}
        .store_uint(ctx_default_fee, 16)  ;; fee = default_fee
        .store_slice(factory_address)  ;; factory_address completo
        .end_cell();
}

;; Crea un nuevo contrato de par
slice deploy_pair(slice token0, slice token1) {
    cell state_init = begin_cell()
        .store_uint(0, 2)  ;; split_depth:(Maybe (## 5))
        .store_dict(ctx_pair_code)  ;; code:(Maybe ^Cell)
        .store_dict(generate_pair_state(token0, token1))  ;; data:(Maybe ^Cell)
        .store_uint(0, 1)  ;; library:(HashmapE 256 SimpleLib)
        .end_cell();
    
    slice pair_address = begin_cell()
        .store_uint(4, 3)  ;; addr_std$10 + anycast:nothing$0
        .store_int(0, 8)   ;; workchain_id:int8 = 0
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
    
    ;; Enviamos mensaje para desplegar el contrato
    var msg = begin_cell()
        .store_uint(0x18, 6)  ;; non-bounceable (0x10) + ihop (0x8)
        .store_slice(pair_address)  ;; address
        .store_coins(100000000)  ;; Envía 0.1 TON al nuevo par
        .store_uint(6, 1 + 4 + 4 + 64 + 32 + 1 + 1)  ;; Mensaje normal
        .store_uint(4 + 2 + 1, 1)  ;; Incluimos el state_init
        .store_ref(state_init)  ;; Referencia al state_init
        .store_uint(0, 1)  ;; No body presente
        .end_cell();
        
    send_raw_message(msg, 64);  ;; Mode = 64 (Reserva el resto del gas)
    
    return pair_address;
}

;; =============== Funciones principales ===============

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    
    slice sender_addr = cs~load_msg_addr();  ;; Cargamos correctamente la dirección del remitente
    
    load_data();
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    
    if (op == op::create_pair) {

        throw_unless(410, in_msg_body.slice_bits() >= 330); ;; Verifica tamaño mínimo

        slice token0 = in_msg_body~load_msg_addr();
        throw_unless(411, token0.preload_uint(2) == 4); ;; Verifica que es addr_std

        slice token1 = in_msg_body~load_msg_addr();
        throw_unless(412, token1.preload_uint(2) == 4); ;; Verifica que es addr_std

        
        ;; Verificar que los tokens sean diferentes
        throw_unless(400, ~ equal_slices(token0, token1));
        
        ;; Verificar que el par no exista ya
        (slice existing_pair, int found) = get_pair(token0, token1);
        throw_if(401, found);
        
        ;; Verificar que hay suficiente TON para la operación (al menos 0.3 TON)
        throw_unless(402, msg_value >= 300000000);
        
        ;; Ordenar tokens para consistencia
        (token0, token1) = sort_tokens(token0, token1);
        
        ;; Crear el nuevo par
        slice pair_address = deploy_pair(token0, token1);
        
        ;; Guardar la referencia al par
        int hash = get_pair_hash(token0, token1);
        ctx_pairs~udict_set(256, hash, begin_cell().store_slice(pair_address).end_cell().begin_parse());
        
        ;; Incrementar contador de pares
        ctx_total_pairs += 1;
        
        save_data();
        return ();
    }
    
    if (op == op::set_fee) {
        ;; Solo el propietario puede cambiar la comisión
        throw_unless(403, equal_slices(sender_addr, ctx_owner));
        
        int new_fee = in_msg_body~load_uint(16);
        
        ;; Verificar que la comisión esté en un rango válido (0-1000 basis points = 0-10%)
        throw_unless(404, new_fee <= 1000);
        
        ctx_default_fee = new_fee;
        
        save_data();
        return ();
    }
    
    if (op == op::collect_fee) {
        ;; Solo el propietario o el colector de comisiones pueden recolectar
        throw_unless(403, equal_slices(sender_addr, ctx_owner) | equal_slices(sender_addr, ctx_fee_collector));
        
        ;; Aquí iría el código para recolectar comisiones acumuladas
        ;; Esto requeriría una lógica adicional para que los pares acumulen comisiones
        ;; y luego las envíen al factory cuando se solicita
        
        return ();
    }
    
    throw(0xffff);  ;; Operación desconocida
}

;; =============== Getters ===============

slice get_pair_address(slice token0, slice token1) method_id {
    load_data();
    (slice pair_address, int found) = get_pair(token0, token1);
    if (found) {
        return pair_address;
    }
    return null();
}

int get_total_pairs() method_id {
    load_data();
    return ctx_total_pairs;
}

int get_default_fee() method_id {
    load_data();
    return ctx_default_fee;
}

slice get_owner() method_id {
    load_data();
    return ctx_owner;
}

slice get_fee_collector() method_id {
    load_data();
    return ctx_fee_collector;
}