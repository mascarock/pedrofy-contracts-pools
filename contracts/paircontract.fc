#include "imports/stdlib.fc";

;; =============== Operaciones ===============
const op::add_liquidity = "op::add_liquidity"c;      ;; 0x234c7bef - Añadir liquidez
const op::remove_liquidity = "op::remove_liquidity"c; ;; 0x5edc1170 - Remover liquidez
const op::swap = "op::swap"c;                        ;; 0x107c51ee - Intercambiar tokens
const op::transfer = "op::transfer"c;                ;; 0x7362d09c - Transferir LP tokens

;; =============== Variables de almacenamiento ===============
global int ctx_token0_address;  ;; Dirección del primer token
global int ctx_token1_address;  ;; Dirección del segundo token
global int ctx_reserve0;        ;; Reserva del primer token
global int ctx_reserve1;        ;; Reserva del segundo token
global int ctx_total_supply;    ;; Suministro total de LP tokens
global cell ctx_lp_balances;    ;; Diccionario de balances de LP tokens
global int ctx_fee;             ;; Comisión (en basis points, 1/10000)
global int ctx_factory_address; ;; Dirección del factory contract

;; =============== Funciones de almacenamiento ===============
() load_data() impure {
    var ds = get_data().begin_parse();

    ;; raíz ― campos fijos
    ctx_token0_address  = ds~load_uint(256);
    ctx_token1_address  = ds~load_uint(256);
    ctx_factory_address = ds~load_uint(256);
    ctx_fee             = ds~load_uint(16);

    ;; sub-celda con datos variables
    slice data_sl       = ds~load_ref().begin_parse();
    ctx_reserve0        = data_sl~load_uint(128);
    ctx_reserve1        = data_sl~load_uint(128);
    ctx_total_supply    = data_sl~load_uint(128);
    ctx_lp_balances     = data_sl~load_dict();

    ds.end_parse();
}

() save_data() impure {
    ;; sub-celda
    var data_cs = begin_cell()
        .store_uint(ctx_reserve0, 128)
        .store_uint(ctx_reserve1, 128)
        .store_uint(ctx_total_supply, 128)
        .store_dict(ctx_lp_balances)
        .end_cell();

    ;; raíz
    set_data(
        begin_cell()
            .store_uint(ctx_token0_address, 256)
            .store_uint(ctx_token1_address, 256)
            .store_uint(ctx_factory_address, 256)
            .store_uint(ctx_fee, 16)
            .store_ref(data_cs)          ;; ¡1 bit, no 1000 bits!
            .end_cell()
    );
}

;; =============== Funciones auxiliares ===============

;; Implementación de raíz cuadrada usando el método de Newton-Raphson
int sqrt(int x) {
    if (x == 0) {
        return 0;
    }
    
    int z = (x + 1) / 2;
    int y = x;
    
    while (z < y) {
        y = z;
        z = (x / z + z) / 2;
    }
    
    return y;
}

;; Obtener balance de LP tokens
int get_lp_balance(int address) {
    (slice value, int found) = ctx_lp_balances.udict_get?(256, address);
    if (found) {
        return value~load_uint(128);
    } else {
        return 0;
    }
}

;; Actualizar balance de LP tokens
() update_lp_balance(int address, int new_balance) impure {
    if (new_balance > 0) {
        ctx_lp_balances~udict_set(256, address, begin_cell().store_uint(new_balance, 128).end_cell().begin_parse());
    } else {
        ctx_lp_balances~udict_delete?(256, address);
    }
}

;; Cálculo de cantidad de tokens para swap usando la fórmula x * y = k
int get_output_amount(int input_amount, int input_reserve, int output_reserve) {
    int input_amount_with_fee = input_amount * (10000 - ctx_fee);
    int numerator = input_amount_with_fee * output_reserve;
    int denominator = (input_reserve * 10000) + input_amount_with_fee;
    return numerator / denominator;
}

;; Calcular la cantidad de LP tokens a emitir
int calculate_liquidity(int amount0, int amount1) {
    if (ctx_total_supply == 0) {
        ;; Para la primera adición de liquidez, LP tokens = sqrt(amount0 * amount1)
        return sqrt(amount0 * amount1);
    } else {
        ;; Para adiciones posteriores, mantener la proporción
        int liquidity0 = (amount0 * ctx_total_supply) / ctx_reserve0;
        int liquidity1 = (amount1 * ctx_total_supply) / ctx_reserve1;
        ;; Usar el menor de los dos para mantener el ratio
        return min(liquidity0, liquidity1);
    }
}

;; =============== Funciones principales ===============

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    
    load_data();
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    
    if (op == op::add_liquidity) {
        int sender_address = cs~load_uint(256);
        int amount0 = in_msg_body~load_uint(128);
        int amount1 = in_msg_body~load_uint(128);
        
        ;; Verificar proporciones (solo para adiciones no iniciales)
        if (ctx_total_supply > 0) {
            int expected_amount1 = (amount0 * ctx_reserve1) / ctx_reserve0;
            int expected_amount0 = (amount1 * ctx_reserve0) / ctx_reserve1;
            
            ;; Usar las cantidades mínimas para mantener proporción
            amount0 = min(amount0, expected_amount0);
            amount1 = min(amount1, expected_amount1);
        }
        
        ;; Calcular LP tokens a emitir
        int liquidity = calculate_liquidity(amount0, amount1);
        
        ;; Actualizar reservas
        ctx_reserve0 += amount0;
        ctx_reserve1 += amount1;
        ctx_total_supply += liquidity;
        
        ;; Actualizar balance del usuario
        int current_balance = get_lp_balance(sender_address);
        update_lp_balance(sender_address, current_balance + liquidity);
        
        save_data();
        return ();
    }
    
    if (op == op::remove_liquidity) {
        int sender_address = cs~load_uint(256);
        int lp_amount = in_msg_body~load_uint(128);
        
        ;; Verificar que el usuario tenga suficientes LP tokens
        int user_balance = get_lp_balance(sender_address);
        throw_unless(400, user_balance >= lp_amount);
        
        ;; Calcular tokens a devolver
        int amount0 = (lp_amount * ctx_reserve0) / ctx_total_supply;
        int amount1 = (lp_amount * ctx_reserve1) / ctx_total_supply;
        
        ;; Actualizar reservas y balances
        ctx_reserve0 -= amount0;
        ctx_reserve1 -= amount1;
        ctx_total_supply -= lp_amount;
        
        ;; Actualizar balance del usuario
        update_lp_balance(sender_address, user_balance - lp_amount);
        
        ;; Aquí se enviarían los tokens al usuario (omitido para simplificar)
        
        save_data();
        return ();
    }
    
    if (op == op::swap) {
        int sender_address = cs~load_uint(256);
        int is_token0_to_token1 = in_msg_body~load_uint(1);  ;; 1 = swap token0 por token1, 0 = swap token1 por token0
        int input_amount = in_msg_body~load_uint(128);
        
        ;; Calcular output basado en la dirección del swap
        int output_amount = 0; ;; Inicialización correcta
        if (is_token0_to_token1) {
            output_amount = get_output_amount(input_amount, ctx_reserve0, ctx_reserve1);
            ctx_reserve0 += input_amount;
            ctx_reserve1 -= output_amount;
        } else {
            output_amount = get_output_amount(input_amount, ctx_reserve1, ctx_reserve0);
            ctx_reserve1 += input_amount;
            ctx_reserve0 -= output_amount;
        }
        
        ;; Aquí se enviarían los tokens al usuario (omitido para simplificar)
        
        save_data();
        return ();
    }
    
    if (op == op::transfer) {
        int sender_address = cs~load_uint(256);
        int recipient_address = in_msg_body~load_uint(256);
        int amount = in_msg_body~load_uint(128);
        
        ;; Verificar balance
        int sender_balance = get_lp_balance(sender_address);
        throw_unless(400, sender_balance >= amount);
        
        ;; Actualizar balances
        update_lp_balance(sender_address, sender_balance - amount);
        int recipient_balance = get_lp_balance(recipient_address);
        update_lp_balance(recipient_address, recipient_balance + amount);
        
        save_data();
        return ();
    }
    
    throw(0xffff);  ;; Operación desconocida
}

;; =============== Getters ===============

(int, int) get_reserves() method_id {
    load_data();
    return (ctx_reserve0, ctx_reserve1);
}

(int, int) get_tokens() method_id {
    load_data();
    return (ctx_token0_address, ctx_token1_address);
}

int get_lp_supply() method_id {
    load_data();
    return ctx_total_supply;
}

int get_lp_balance_of(int address) method_id {
    load_data();
    return get_lp_balance(address);
}

int get_swap_amount(int input_amount, int is_token0_to_token1) method_id {
    load_data();
    if (is_token0_to_token1) {
        return get_output_amount(input_amount, ctx_reserve0, ctx_reserve1);
    } else {
        return get_output_amount(input_amount, ctx_reserve1, ctx_reserve0);
    }
}